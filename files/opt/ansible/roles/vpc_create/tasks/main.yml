---
- name: Create / Ensure ec2 key
  ec2_key:
    name: "{{ vpc_key_name }}"
    region: "{{ vpc_region }}"
  register: deployer

- name: Generated Deployment key
  debug: var=deployer.key.private_key
  when: deployer.changed

- name: save deploy key
  pause: prompt="The previous key was generated as an AWS deployment key. Sanctuary does not back up this information, so it would be wise to save a copy. Press enter to continue once you are finished."
  when: deployer.changed

- name: Create VPC
  local_action:
    module: ec2_vpc
    region: "{{ vpc_region }}"
    cidr_block: "{{ vpc_ip_root }}.0.0/16"
    resource_tags: { "Name":"{{ vpc_name }}" }
  register: vpc

- name: Create Internet gateway for VPC.
  ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    state: present
  register: igw

- name: "Create subnet for {{ vpc_az0 }}"
  ec2_vpc_subnet:
    state: present
    az: "{{ vpc_az0 }}"
    region: "{{ vpc_region }}"
    vpc_id: "{{ vpc.vpc_id }}"
    cidr: "{{ vpc_ip_root }}.{{ az0_subnet_range}}/24"
    resource_tags:
      Name: "{{ vpc_name }}"
  register: az0_subnet

- name: "Create subnet for {{ vpc_az1 }}"
  ec2_vpc_subnet:
    state: present
    az: "{{ vpc_az1 }}"
    region: "{{ vpc_region }}"
    vpc_id: "{{ vpc.vpc_id }}"
    cidr: "{{ vpc_ip_root }}.{{ az1_subnet_range}}/24"
    resource_tags:
      Name: "{{ vpc_name }}"
  register: az1_subnet

- name: Setup route tables
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ vpc_region }}"
    subnets:
      - "{{ az0_subnet.subnet.cidr_block }}"
      - "{{ az1_subnet.subnet.cidr_block }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
  register: public_route_table

- name: Create a empty security group
  local_action:
    module: ec2_group
    region: "{{ vpc_region }}"
    vpc_id: "{{ vpc.vpc_id }}"
    name: "{{ vpc_sg_name }}"
    description: "{{ vpc_sg_name }}"
    rules:
      - proto: tcp
        from_port: 8200
        to_port: 8200
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  register: sanctuary_sg

- name: "Create launch config"
  ec2_lc:
    name: "{{ vpc_name }}"
    region: "{{ vpc_region }}"
    image_id: "{{ vpc_sanctuary_ami }}"
    assign_public_ip: yes
    instance_type: "{{ vpc_sanctuary_instance_size }}"
    key_name: "{{ vpc_key_name }}"
    security_groups: "{{ sanctuary_sg.group_id }}"
    instance_profile_name: "{{ iam_role_name }}"
    user_data: "{{ lookup('template', 'templates/startup.sh.j2') }}"
  register: sanctuary_lc

- name: Configure Elastic Load Balancer
  ec2_elb_lb:
    name: "{{ vpc_name }}-elb"
    region: "{{ vpc_region }}"
    state: present
    security_group_ids: "{{ sanctuary_sg.group_id }}"
    subnets:
      - "{{ az0_subnet.subnet.id }}"
      - "{{ az1_subnet.subnet.id }}"
    listeners:
      - protocol: tcp
        load_balancer_port: 8200
        instance_port: 8200
    health_check:
        ping_protocol: tcp # options are http, https, ssl, tcp
        ping_port: 8200
        response_timeout: 5 # seconds
        interval: 300 # seconds
        unhealthy_threshold: 2
        healthy_threshold: 2
  register: elb_result

- name: "Create auto-scaling group"
  ec2_asg:
    name: "{{ vpc_name }}"
    region: "{{ vpc_region }}"
    launch_config_name: "{{ vpc_name }}"
    health_check_period: 60
    health_check_type: EC2
    min_size: 2
    max_size: 2
    wait_for_instances: no
    desired_capacity: 2
    tags:
      - Name: "{{ vpc_name }}-host"
    vpc_zone_identifier:
      - "{{ az0_subnet.subnet.id }}"
      - "{{ az1_subnet.subnet.id }}"
    load_balancers: "{{ vpc_name }}-elb"
