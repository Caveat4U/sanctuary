---
# @todo: need to ensure this sorts by latest first.
- name: Look up sanctuary AMI.
  ec2_ami_find:
    owner: "{{ sanctuary_ami_owner }}"
    region: "{{ vpc_region }}"
    sort: name
    sort_order: descending
    ami_tags:
      Service: vault
    no_result_action: fail
  register: ami_find

- name: Create launch config
  ec2_lc:
    name: "{{ vpc_name }}"
    region: "{{ vpc_region }}"
    image_id: "{{ ami_find.results[0].ami_id }}"
    assign_public_ip: yes
    instance_type: "{{ vpc_sanctuary_instance_size }}"
    key_name: "{{ vpc_key_name }}"
    security_groups: "{{ sanctuary_sg.group_id }}"
    instance_profile_name: "{{ iam_role_name }}"
  register: sanctuary_lc

- name: Configure Elastic Load Balancer
  ec2_elb_lb:
    name: "{{ vpc_name }}-elb"
    region: "{{ vpc_region }}"
    state: present
    security_group_ids: "{{ sanctuary_sg.group_id }}"
    subnets:
      - "{{ vpc.subnets[0].id }}"
      - "{{ vpc.subnets[1].id }}"
    listeners:
      - protocol: tcp
        load_balancer_port: 8200
        instance_port: 8200
    health_check:
        ping_protocol: tcp
        ping_port: 8200
        response_timeout: 5 # seconds
        interval: 300 # seconds
        unhealthy_threshold: 2
        healthy_threshold: 2
  register: elb_result

- name: Create auto-scaling group
  ec2_asg:
    name: "{{ vpc_name }}"
    region: "{{ vpc_region }}"
    launch_config_name: "{{ vpc_name }}"
    health_check_period: 60
    health_check_type: EC2
    min_size: 2
    max_size: 2
    wait_for_instances: no
    desired_capacity: 2
    tags:
      - Name: "{{ vpc_sanctuary_instance_name }}"
    vpc_zone_identifier:
      - "{{ vpc.subnets[0].id }}"
      - "{{ vpc.subnets[1].id }}"
    load_balancers: "{{ vpc_name }}-elb"
